//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.10.102
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Portfolio.Core.Models
{
	// Mixin content Type 1051 with alias "Project"
	/// <summary>Project</summary>
	public partial interface IProject : IPublishedContent
	{
		/// <summary>Client Name</summary>
		string ClientName { get; }

		/// <summary>Description</summary>
		IHtmlString Description { get; }

		/// <summary>Detail list</summary>
		Archetype.Models.ArchetypeModel DetailList { get; }

		/// <summary>Featured</summary>
		bool Featured { get; }

		/// <summary>FeaturedImage</summary>
		IEnumerable<IPublishedContent> FeaturedImage { get; }

		/// <summary>Hero</summary>
		IPublishedContent Hero { get; }

		/// <summary>HideInNavbar</summary>
		bool HideInNavbar { get; }

		/// <summary>mobileListImage</summary>
		IPublishedContent MobileListImage { get; }

		/// <summary>RelatedProjects</summary>
		IEnumerable<IPublishedContent> RelatedProject { get; }

		/// <summary>Role</summary>
		string Role { get; }

		/// <summary>Sort</summary>
		int Sort { get; }

		/// <summary>Teaser</summary>
		string Teaser { get; }

		/// <summary>Title</summary>
		string Title { get; }

		/// <summary>webListImage</summary>
		IPublishedContent WebListImage { get; }

		/// <summary>webListPlaceholder</summary>
		IPublishedContent WebListPlaceholder { get; }

		/// <summary>Year</summary>
		string Year { get; }
	}

	/// <summary>Project</summary>
	[PublishedContentModel("Project")]
	public partial class Project : PublishedContentModel, IProject
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Project";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Project(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Project, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Client Name
		///</summary>
		[ImplementPropertyType("clientName")]
		public string ClientName
		{
			get { return GetClientName(this); }
		}

		/// <summary>Static getter for Client Name</summary>
		public static string GetClientName(IProject that) { return that.GetPropertyValue<string>("clientName"); }

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("description")]
		public IHtmlString Description
		{
			get { return GetDescription(this); }
		}

		/// <summary>Static getter for Description</summary>
		public static IHtmlString GetDescription(IProject that) { return that.GetPropertyValue<IHtmlString>("description"); }

		///<summary>
		/// Detail list
		///</summary>
		[ImplementPropertyType("detailList")]
		public Archetype.Models.ArchetypeModel DetailList
		{
			get { return GetDetailList(this); }
		}

		/// <summary>Static getter for Detail list</summary>
		public static Archetype.Models.ArchetypeModel GetDetailList(IProject that) { return that.GetPropertyValue<Archetype.Models.ArchetypeModel>("detailList"); }

		///<summary>
		/// Featured
		///</summary>
		[ImplementPropertyType("featured")]
		public bool Featured
		{
			get { return GetFeatured(this); }
		}

		/// <summary>Static getter for Featured</summary>
		public static bool GetFeatured(IProject that) { return that.GetPropertyValue<bool>("featured"); }

		///<summary>
		/// FeaturedImage: w: 624px x h: 413 px
		///</summary>
		[ImplementPropertyType("featuredImage")]
		public IEnumerable<IPublishedContent> FeaturedImage
		{
			get { return GetFeaturedImage(this); }
		}

		/// <summary>Static getter for FeaturedImage</summary>
		public static IEnumerable<IPublishedContent> GetFeaturedImage(IProject that) { return that.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredImage"); }

		///<summary>
		/// Hero: w: 4272 x 2848 px (top 60%)
		///</summary>
		[ImplementPropertyType("hero")]
		public IPublishedContent Hero
		{
			get { return GetHero(this); }
		}

		/// <summary>Static getter for Hero</summary>
		public static IPublishedContent GetHero(IProject that) { return that.GetPropertyValue<IPublishedContent>("hero"); }

		///<summary>
		/// HideInNavbar
		///</summary>
		[ImplementPropertyType("hideInNavbar")]
		public bool HideInNavbar
		{
			get { return GetHideInNavbar(this); }
		}

		/// <summary>Static getter for HideInNavbar</summary>
		public static bool GetHideInNavbar(IProject that) { return that.GetPropertyValue<bool>("hideInNavbar"); }

		///<summary>
		/// mobileListImage
		///</summary>
		[ImplementPropertyType("mobileListImage")]
		public IPublishedContent MobileListImage
		{
			get { return GetMobileListImage(this); }
		}

		/// <summary>Static getter for mobileListImage</summary>
		public static IPublishedContent GetMobileListImage(IProject that) { return that.GetPropertyValue<IPublishedContent>("mobileListImage"); }

		///<summary>
		/// RelatedProjects: content picker for related projects
		///</summary>
		[ImplementPropertyType("relatedProject")]
		public IEnumerable<IPublishedContent> RelatedProject
		{
			get { return GetRelatedProject(this); }
		}

		/// <summary>Static getter for RelatedProjects</summary>
		public static IEnumerable<IPublishedContent> GetRelatedProject(IProject that) { return that.GetPropertyValue<IEnumerable<IPublishedContent>>("relatedProject"); }

		///<summary>
		/// Role
		///</summary>
		[ImplementPropertyType("role")]
		public string Role
		{
			get { return GetRole(this); }
		}

		/// <summary>Static getter for Role</summary>
		public static string GetRole(IProject that) { return that.GetPropertyValue<string>("role"); }

		///<summary>
		/// Sort: Sort order
		///</summary>
		[ImplementPropertyType("sort")]
		public int Sort
		{
			get { return GetSort(this); }
		}

		/// <summary>Static getter for Sort</summary>
		public static int GetSort(IProject that) { return that.GetPropertyValue<int>("sort"); }

		///<summary>
		/// Teaser
		///</summary>
		[ImplementPropertyType("teaser")]
		public string Teaser
		{
			get { return GetTeaser(this); }
		}

		/// <summary>Static getter for Teaser</summary>
		public static string GetTeaser(IProject that) { return that.GetPropertyValue<string>("teaser"); }

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return GetTitle(this); }
		}

		/// <summary>Static getter for Title</summary>
		public static string GetTitle(IProject that) { return that.GetPropertyValue<string>("title"); }

		///<summary>
		/// webListImage: w: 624px x h: 413 px
		///</summary>
		[ImplementPropertyType("webListImage")]
		public IPublishedContent WebListImage
		{
			get { return GetWebListImage(this); }
		}

		/// <summary>Static getter for webListImage</summary>
		public static IPublishedContent GetWebListImage(IProject that) { return that.GetPropertyValue<IPublishedContent>("webListImage"); }

		///<summary>
		/// webListPlaceholder: w: 624 px, h: 423 px
		///</summary>
		[ImplementPropertyType("webListPlaceholder")]
		public IPublishedContent WebListPlaceholder
		{
			get { return GetWebListPlaceholder(this); }
		}

		/// <summary>Static getter for webListPlaceholder</summary>
		public static IPublishedContent GetWebListPlaceholder(IProject that) { return that.GetPropertyValue<IPublishedContent>("webListPlaceholder"); }

		///<summary>
		/// Year
		///</summary>
		[ImplementPropertyType("year")]
		public string Year
		{
			get { return GetYear(this); }
		}

		/// <summary>Static getter for Year</summary>
		public static string GetYear(IProject that) { return that.GetPropertyValue<string>("year"); }
	}
}
